import React, { createContext, useEffect, useState } from "react";
import axios from "axios";
import Toast from "react-native-toast-message";
import AsyncStorage from "@react-native-async-storage/async-storage";
import { BASE_URL } from "../api/apiUrl";

export const AuthContext = createContext();

/*
   pati sa pemet mwen di men ki mesaj m vle jwen de plugin toast lan 
  */

const showToast = () => {
  Toast.show({
    type: "success",
    text1: "Inscription",
    text2: "Votre compte crÃ©Ã© avec succÃ¨s !! ðŸ‘‹",
    autoHide: true,
    visibilityTime: 4500,
  });
};

const showToastError = () => {
  Toast.show({
    type: "error",
    text1: "Attention!",
    text2: "Ce nif existe dÃ©jÃ  !!",
    autoHide: true,
    visibilityTime: 4500,
  });
};

const showToastEmail = () => {
  Toast.show({
    type: "error",
    text1: "Attention !!",
    text2: "Cette adresse email existe dÃ©jÃ  !!",
    autoHide: true,
    visibilityTime: 4500,
  });
};

const showToastEmailNif = () => {
  Toast.show({
    type: "error",
    text1: "Attention !!",
    text2: "Ce nif et l'email existe dÃ©jÃ  !!",
    autoHide: true,
    visibilityTime: 4500,
  });
};

const showToastErr = () => {
  Toast.show({
    type: "error",
    text1: "Attention !!",
    text2: "Une erreur s'est produite",
    autoHide: true,
    visibilityTime: 4500,
  });
};

/*
  pati sa m jere toast lan ak tout configuration
*/

const showToastNif = () => {
  Toast.show({
    type: "error",
    text1: "Attention!",
    text2: "Nif ou password incorrect",
    autoHide: true,
    visibilityTime: 4500,
  });
};

const showToastSucces = () => {
  Toast.show({
    type: "success",
    text1: "Message",
    text2: "Le compte existe vraiment dans la base de donnÃ©es",
    autoHide: true,
    visibilityTime: 4500,
  });
};

// const showToastPassword = () => {
//   Toast.show({
//     type: "error",
//     text1: "Attention !!",
//     text2: "Nif ou password incorrect",
//     autoHide: true,
//     visibilityTime: 4500,
//   });
// };

/*

*/
export const AuthProvider = ({ children }) => {
  const [userInfo, setUserInfo] = useState({});
  const [isLoading, setIsLoading] = useState(false);
  const [splachLoading, setSplachLoading] = useState(false);



 // DÃ©finition d'une fonction d'inscription
const register = (values) => {
  // Mettre isLoading Ã  true pour indiquer qu'une opÃ©ration est en cours
  setIsLoading(true);

  // Effectuer une requÃªte POST Ã  l'URL de base combinÃ©e avec le chemin d'inscription "/api/auth/register"
  axios
    .post(`${BASE_URL}/api/auth/register`, values)
    .then((response) => {
      // Une fois la rÃ©ponse reÃ§ue avec succÃ¨s...
      // Extraire les informations de l'utilisateur de la rÃ©ponse
      let userInfo = response.data;

      /*
      m voy mesaj poum di moun nn ke kont lan cree
      */

      // VÃ©rifier si des informations utilisateur sont prÃ©sentes
      if (userInfo) {
        // Mettre isLoading Ã  false pour indiquer que l'opÃ©ration est terminÃ©e
        setIsLoading(false);

        // Mettre Ã  jour les informations de l'utilisateur avec les donnÃ©es reÃ§ues
        setUserInfo(userInfo);

        // Stocker les informations de l'utilisateur dans le stockage local sous forme de chaÃ®ne JSON
        AsyncStorage.setItem("userInfo", JSON.stringify(userInfo));

        // Appeler la fonction showToast() pour afficher un message de succÃ¨s
        showToast();
      }
    })
    .catch((error) => {
      /*
      m afiche messaj si nif lan ak email lan existe deja
      */

      // Extraire les donnÃ©es d'erreur de la configuration de la requÃªte
      let errorParsed = JSON.parse(error.response.config.data);

      // VÃ©rifier si Ã  la fois "nif" et "email" sont prÃ©sents dans les donnÃ©es d'erreur
      if (errorParsed?.nif && errorParsed?.email) {
        // Mettre isLoading Ã  false en cas d'erreur
        setIsLoading(false);

        // Appeler la fonction showToastEmailNif() pour afficher un message d'erreur spÃ©cifique
        showToastEmailNif();

        // Afficher les dÃ©tails de l'erreur dans la console
        console.log(errorParsed);
      } else if (errorParsed?.nif) {
        // Mettre isLoading Ã  false en cas d'erreur
        setIsLoading(false);

        // Appeler la fonction showToastError() pour afficher un message d'erreur liÃ© au nif
        showToastError();
      } else if (errorParsed?.email) {
        // Mettre isLoading Ã  false en cas d'erreur
        setIsLoading(false);

        // Appeler la fonction showToastEmail() pour afficher un message d'erreur liÃ© Ã  l'email
        showToastEmail();
      }
    });
};

  // DÃ©finition d'une fonction de connexion
const login = (values) => {
  // Mettre isLoading Ã  true pour indiquer qu'une opÃ©ration est en cours
  setIsLoading(true);

  // Effectuer une requÃªte POST Ã  l'URL de base combinÃ©e avec le chemin d'authentification "/api/auth/login"
  axios
    .post(`${BASE_URL}/api/auth/login`, values)
    .then((response) => {
      // Une fois la rÃ©ponse reÃ§ue avec succÃ¨s...
      // Extraire les informations de l'utilisateur de la rÃ©ponse
      let userInfo = response.data;

      /*
      m voy mesaj poum di moun nn ke kont lan cree
      */

      // Mettre isLoading Ã  false pour indiquer que l'opÃ©ration est terminÃ©e
      setIsLoading(false);

      // Mettre Ã  jour les informations de l'utilisateur avec les donnÃ©es reÃ§ues
      setUserInfo(userInfo);

      // Convertir les informations de l'utilisateur en chaÃ®ne JSON
      let values = JSON.stringify(userInfo);

      // Stocker les informations de l'utilisateur dans le stockage local (AsyncStorage)
      AsyncStorage.setItem("userInfo", values);

      // DÃ©commenter la ligne suivante si vous avez une fonction showToastSucces() pour afficher un message de succÃ¨s
      //showToastSucces();
    })
    .catch((error) => {
      /*
      m afiche messaj si nif lan ak email lan existe deja
      */

      // Extraire les donnÃ©es d'erreur de la rÃ©ponse d'erreur
      const errorParsed = error.response.data;

      // VÃ©rifier si un message d'erreur est prÃ©sent dans les donnÃ©es d'erreur
      if (errorParsed?.message) {
        // Mettre isLoading Ã  false en cas d'erreur
        setIsLoading(false);

        // Appeler la fonction showToastNif() pour afficher un message d'erreur
        showToastNif();
      }
    });
};

// DÃ©finition d'une fonction de dÃ©connexion appelÃ©e "logout"
const logout = async () => {
  // Mettre isLoading Ã  true pour indiquer qu'une opÃ©ration est en cours
  setIsLoading(true);

  // Effectuer une requÃªte POST Ã  l'URL de base combinÃ©e avec le chemin de dÃ©connexion "/api/auth/logout"
  // et inclure le token d'autorisation dans les en-tÃªtes de la requÃªte
  axios.post(`${BASE_URL}/api/auth/logout`, null, {
    headers: { Authorization: `Bearer ${userInfo.token}` }
  }).then(response => {
    // Une fois la rÃ©ponse reÃ§ue avec succÃ¨s...
    // Supprimer les informations utilisateur du stockage local
    AsyncStorage.removeItem('userInfo');

    // RÃ©initialiser les informations utilisateur Ã  un objet vide
    setUserInfo({});

    // Mettre isLoading Ã  false pour indiquer que l'opÃ©ration est terminÃ©e
    setIsLoading(false);
  }).catch(error => {
    // En cas d'erreur...
    // Mettre isLoading Ã  false en cas d'erreur
    setIsLoading(false);

    // Appeler la fonction showToastErr() pour afficher un message d'erreur
    showToastErr();
  });
};


  const isLoggedIn = async () => {
    try {
      setSplachLoading(true);
      let userInfo = await AsyncStorage.getItem("userInfo");
      userInfo = JSON.parse(userInfo);

      if (userInfo) {
        setUserInfo(userInfo);
      }
      setSplachLoading(false);
    } catch (error) {
      setSplachLoading(false);
      console.log(error);
    }
  };

  useEffect(() => {
    isLoggedIn();
  }, []);

  return (
    <AuthContext.Provider
      value={{
        isLoading,
        isLoggedIn,
        userInfo,
        splachLoading,
        register,
        login,
        logout,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};
